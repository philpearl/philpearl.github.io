// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package badgo

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson73d12052DecodeGithubComPhilpearlBlogContentPost(in *jlexer.Lexer, out *myteststruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "A":
			(out.A).UnmarshalEasyJSON(in)
		case "B":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.B).UnmarshalJSON(data))
			}
		case "C":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.C).UnmarshalJSON(data))
			}
		case "D":
			(out.D).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson73d12052EncodeGithubComPhilpearlBlogContentPost(out *jwriter.Writer, in myteststruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"A\":"
		out.RawString(prefix[1:])
		(in.A).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"B\":"
		out.RawString(prefix)
		out.Raw((in.B).MarshalJSON())
	}
	{
		const prefix string = ",\"C\":"
		out.RawString(prefix)
		out.Raw((in.C).MarshalJSON())
	}
	{
		const prefix string = ",\"D\":"
		out.RawString(prefix)
		(in.D).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v myteststruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson73d12052EncodeGithubComPhilpearlBlogContentPost(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *myteststruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson73d12052DecodeGithubComPhilpearlBlogContentPost(l, v)
}
