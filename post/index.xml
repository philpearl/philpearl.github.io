<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Phil Pearl&#39;s Blog</title>
    <link>https://philpearl.github.io/post/</link>
    <description>Recent content in Posts on Phil Pearl&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-gb</language>
    <lastBuildDate>Fri, 29 Nov 2024 11:00:00 +0000</lastBuildDate>
    <atom:link href="https://philpearl.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>I stan clearing maps, no cap</title>
      <link>https://philpearl.github.io/post/map_clearing_and_size/</link>
      <pubDate>Fri, 29 Nov 2024 11:00:00 +0000</pubDate>
      <guid>https://philpearl.github.io/post/map_clearing_and_size/</guid>
      <description>Recently at work I ran into an interesting performance problem. We have a data processing job that is basically a series of count-distinct operations. It uses a map to help work out the distinct sets of values.&#xA;In the past we&amp;rsquo;ve done some performance work on this, and we&amp;rsquo;ve arranged things so that we re-use the map between operations.&#xA;Re-using the map was great! Calling clear on the map and re-using it was much faster than creating a new map each time.</description>
    </item>
    <item>
      <title>Dumb ways to die: Random Values in Pointers</title>
      <link>https://philpearl.github.io/post/dumb_ways_to_die_random_pointers/</link>
      <pubDate>Fri, 30 Aug 2024 10:30:00 +0000</pubDate>
      <guid>https://philpearl.github.io/post/dumb_ways_to_die_random_pointers/</guid>
      <description>I seem to be writing about one blog post a year at the moment. I always tell myself I want to write more, but it doesn&amp;rsquo;t happen. This, however, is the first post in a series. But I only have two ideas for posts, and one seems like a bad idea, so it could be a short series!&#xA;Every now and again I visit the Go slack, in particular the #performance channel and the #darkarts channel.</description>
    </item>
    <item>
      <title>What is a Go function variable?</title>
      <link>https://philpearl.github.io/post/functionpointers/</link>
      <pubDate>Sun, 16 Apr 2023 09:00:00 +0000</pubDate>
      <guid>https://philpearl.github.io/post/functionpointers/</guid>
      <description>Me: What&amp;rsquo;s the audience for this post?&#xA;Also Me: People who write code in Go and care what a function variable actually is.&#xA;Me: &amp;hellip;&#xA;Also Me: I mean right down to the bits and bytes&#xA;Me: &amp;hellip;&#xA;Also Me: &amp;hellip;&#xA;What is it that got me interested in writing this blog post, given I think it&amp;rsquo;s likely to have an incredibly small audience? Well, I wrote some code recently that uses a list of function variables, and I wanted to test that every function in the list had a unit test, and that every unit tested function was included in the list.</description>
    </item>
    <item>
      <title>Breaking Printf</title>
      <link>https://philpearl.github.io/post/anathema/</link>
      <pubDate>Sun, 07 Nov 2021 12:00:00 +0000</pubDate>
      <guid>https://philpearl.github.io/post/anathema/</guid>
      <description>Acute impostor syndrome. When something you&amp;rsquo;ve built, something you&amp;rsquo;re proud of, built against all advice, full of unsafe, goes deeply, horribly wrong. Unspeakably wrong. You&amp;rsquo;ve built your company&amp;rsquo;s data pipeline around this code. If it is wrong then everything might be wrong. How could it go so wrong?&#xA;Your belief in yourself crumbles away. The ghost of Rob Pike haunts your every waking moment, shreiking &amp;ldquo;premature optimisation is the root of all evil&amp;rdquo;.</description>
    </item>
    <item>
      <title>Faster time parsing</title>
      <link>https://philpearl.github.io/post/perf_time/</link>
      <pubDate>Fri, 01 Oct 2021 12:00:00 +0000</pubDate>
      <guid>https://philpearl.github.io/post/perf_time/</guid>
      <description>Here at Ravelin we have a lot of data with a lot of timestamps. Most of the timestamps are stored as strings in BigQuery, and most of our Go structs represent time with the Go time.Time type.&#xA;I say these facts above with regret. We really do have a lot of data. And we really do have a lot of timestamps. For some time I&amp;rsquo;ve been circling around a conclusion, and as more time passes I&amp;rsquo;m certain I&amp;rsquo;ll fall toward it:</description>
    </item>
    <item>
      <title>Context</title>
      <link>https://philpearl.github.io/post/context/</link>
      <pubDate>Tue, 27 Apr 2021 11:00:00 +0000</pubDate>
      <guid>https://philpearl.github.io/post/context/</guid>
      <description>When I write text I work hard to avoid being too terse. I&amp;rsquo;ve learnt the hard way that for me it&amp;rsquo;s very difficult to write too much. My natural level is very terse. So what feels like too much to me is often not nearly enough.&#xA;So I try to write more. I write not only about what I&amp;rsquo;m doing, but why I&amp;rsquo;m doing it. I try to explain not only what my changes are, but what existed before, and what might make sense in future.</description>
    </item>
    <item>
      <title>It ain&#39;t necessarily slow</title>
      <link>https://philpearl.github.io/post/aintnecessarilyslow/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://philpearl.github.io/post/aintnecessarilyslow/</guid>
      <description>Don&amp;rsquo;t use reflection. Unless you really have to. But when you&amp;rsquo;re not using reflection, don&amp;rsquo;t think that it is because reflection is fundamentally slow. It doesn&amp;rsquo;t have to be slow.&#xA;Reflection allows you to obtain information about Go types at runtime. We&amp;rsquo;ll look at how you can use it to populate structs if you were ever foolish enough to try to write a new version of something like json.Unmarshal.&#xA;We&amp;rsquo;ll deal with a simple case.</description>
    </item>
    <item>
      <title>[]byte versus io.Reader</title>
      <link>https://philpearl.github.io/post/reader/</link>
      <pubDate>Sat, 23 May 2020 14:30:40 +0000</pubDate>
      <guid>https://philpearl.github.io/post/reader/</guid>
      <description>Everyone loves io.Reader. It&amp;rsquo;s often touted as people&amp;rsquo;s favourite thing in Go. But it&amp;rsquo;s not the best abstraction when you get down to the small. When you&amp;rsquo;re doing lots of small reads to parse a protocol the overheads are too high, even if you&amp;rsquo;re using a buffered reader. I think the best abstraction at this point may be []byte, which is essentially no abstraction at all. But lets try using io.</description>
    </item>
    <item>
      <title>Nil versus empty slices</title>
      <link>https://philpearl.github.io/post/nil_and_empty/</link>
      <pubDate>Sat, 25 Apr 2020 13:39:00 +0000</pubDate>
      <guid>https://philpearl.github.io/post/nil_and_empty/</guid>
      <description>Go can have nil slices and empty slices, and they&amp;rsquo;re different. What&amp;rsquo;s up with that?&#xA;Regular readers of my blog (a select group if ever there was one) will know by now that a slice is syntactic sugar for a struct with a Data pointer, a Length and a Capacity. There&amp;rsquo;s a definition of this struct in reflect. It looks like this.&#xA;type SliceHeader struct { Data uintptr Len int Cap int } When a slice is nil all the fields of the slice header are empty.</description>
    </item>
    <item>
      <title>Search for a new JSON: jsoniter</title>
      <link>https://philpearl.github.io/post/json_iter/</link>
      <pubDate>Sun, 12 Apr 2020 09:00:00 +0000</pubDate>
      <guid>https://philpearl.github.io/post/json_iter/</guid>
      <description>Both of my regular readers may be wondering what happened after my last blog about potentially forking encoding/json. Did I fork it? No I didn&amp;rsquo;t.&#xA;This is partly because I discovered https://github.com/json-iterator/go, which looks like it is the JSON library I was looking for. And partly because I spent my enthusiasm writing plenc - a serialisation library based around the protobuf wire protocol that bases message definitions on Go structures instead of .</description>
    </item>
    <item>
      <title>Examining Evil</title>
      <link>https://philpearl.github.io/post/examining_evil/</link>
      <pubDate>Sat, 25 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://philpearl.github.io/post/examining_evil/</guid>
      <description>It feels trite to write about the famous quote about premature optimisation being the root of all evil (I double-checked the definition of &amp;ldquo;trite&amp;rdquo; before I wrote that sentence!). But I do have a strongly-held opinion about it. What I like to call &amp;ldquo;normal&amp;rdquo; levels of optimisation are not only not evil: they&amp;rsquo;re entirely necessary in many circumstances.&#xA;I keep hitting examples where performance was apparently not considered before something was released.</description>
    </item>
    <item>
      <title>Rebel Go: Forking encoding/json</title>
      <link>https://philpearl.github.io/post/json_own_way/</link>
      <pubDate>Sun, 17 Nov 2019 09:00:00 +0000</pubDate>
      <guid>https://philpearl.github.io/post/json_own_way/</guid>
      <description>So in my mind the conversation went a little like this.&#xA;Phil: I&amp;rsquo;d like to make encoding/json better. I&amp;rsquo;d like to save allocations when marshaling by adding a new interface for custom marshalers.&#xA;World: Given that this can be explored in 3rd-party packages easily, this seems like a likely decline. Leaving open for a week for final comments.&#xA;Phil: Oh, interesting, what would a successful exploration look like?&#xA;World: One consequence of writing your own package is that you could use it and would not need the change in the standard library.</description>
    </item>
    <item>
      <title>Good Go: Contributing to encoding/json</title>
      <link>https://philpearl.github.io/post/json_good/</link>
      <pubDate>Fri, 15 Nov 2019 09:00:00 +0000</pubDate>
      <guid>https://philpearl.github.io/post/json_good/</guid>
      <description>In my last post I whinged endlessly about encoding/json and in particular about the poor performance of anything with a custom marshaler. I decided to try to do something about it and I raised a proposal for a new marshaler interface.&#xA;As I half expected I wasn&amp;rsquo;t immediately welcomed as the new Go Messiah and my proposal has been effectively rejected (stop press - actually rejected). There&amp;rsquo;s very little inclination amongst the Go maintainers to change any of the interfaces in the standard libraries, and for some reason changing encoding/json or encoding/xml is viewed with particular horror.</description>
    </item>
    <item>
      <title>Bad Go: Adventures with JSON marshalling</title>
      <link>https://philpearl.github.io/post/badgo_json/</link>
      <pubDate>Sat, 05 Oct 2019 09:00:00 +0000</pubDate>
      <guid>https://philpearl.github.io/post/badgo_json/</guid>
      <description>This is a story about encoding/json in the Go standard library. I&amp;rsquo;m not going to say this is bad Go. That would be heresy. But there is an aspect of marshalling that could be improved. Because it is in the standard library it isn&amp;rsquo;t bad Go, but if you followed the pattern in your own code then that would be a mistake. Outside of the standard library it would lose its magical aura, and it would be bad Go.</description>
    </item>
    <item>
      <title>Bad Go: guessing</title>
      <link>https://philpearl.github.io/post/bad_go_guessing/</link>
      <pubDate>Fri, 20 Sep 2019 09:25:00 +0000</pubDate>
      <guid>https://philpearl.github.io/post/bad_go_guessing/</guid>
      <description>This is the 5th in a series of posts about Bad Go - a clickbaity title for posts about Go code that I&amp;rsquo;ve found frustrating because it could just be that little bit better. Better in my mind means more performant with less impact on GC, without being more complex or harder to read.&#xA;In this post I&amp;rsquo;ll rant about a problem I&amp;rsquo;ve seen in a number of blog posts. I&amp;rsquo;ve seen it more in blog posts than in actual code, but I&amp;rsquo;m sure people do this with real coding too.</description>
    </item>
    <item>
      <title>Bad Go: not sizing slices</title>
      <link>https://philpearl.github.io/post/bad_go_not_sizing_arrays/</link>
      <pubDate>Thu, 05 Sep 2019 09:25:00 +0000</pubDate>
      <guid>https://philpearl.github.io/post/bad_go_not_sizing_arrays/</guid>
      <description>This is the 4th in a series of posts about Bad Go - a clickbaity title for posts about Go code that I&amp;rsquo;ve found frustrating because it could just be that little bit better. Better in my mind means more performant with less impact on GC, without being more complex or harder to read.&#xA;In this post we&amp;rsquo;ll look at a very common issue - not setting the size of a slice when you know how big it needs to be.</description>
    </item>
    <item>
      <title>Bad Go: frivolous Sprintf</title>
      <link>https://philpearl.github.io/post/bad_go_sprintf/</link>
      <pubDate>Sun, 01 Sep 2019 09:25:00 +0000</pubDate>
      <guid>https://philpearl.github.io/post/bad_go_sprintf/</guid>
      <description>This is the 3rd in a series of posts about Bad Go - a clickbaity title for posts about Go that I&amp;rsquo;ve found frustrating because it could just be that little bit better. Better in my mind is often more performant with less impact on GC without being more complex or harder to read.&#xA;The first two posts are about slices of pointers and pointer returns from functions&#xA;This one is about reaching for fmt.</description>
    </item>
    <item>
      <title>Bad Go: pointer returns</title>
      <link>https://philpearl.github.io/post/bad_go_pointer_returns/</link>
      <pubDate>Fri, 30 Aug 2019 15:30:00 +0000</pubDate>
      <guid>https://philpearl.github.io/post/bad_go_pointer_returns/</guid>
      <description>As an old C programmer I struggle with this one: it feels completely normal for functions to return pointers to structs. But I&amp;rsquo;ve a feeling this is bad Go, and that we&amp;rsquo;re normally better off returning struct values. I&amp;rsquo;m going to see if I can prove that returning struct values is just plain better, and that returning pointers is bad Go.&#xA;I&amp;rsquo;m going to define a struct that I can vary in size easily.</description>
    </item>
    <item>
      <title>Bad Go: slices of pointers</title>
      <link>https://philpearl.github.io/post/bad_go_slice_of_pointers/</link>
      <pubDate>Fri, 30 Aug 2019 09:25:00 +0000</pubDate>
      <guid>https://philpearl.github.io/post/bad_go_slice_of_pointers/</guid>
      <description>This is the first of what may be a series of blog posts on uses of Go that I&amp;rsquo;ve found frustrating. They&amp;rsquo;re mostly minor things that could just be better without being more complicated. I&amp;rsquo;m going to try to not only explain why they are bad but also demonstrate it.&#xA;First up is slices of pointers. Things like []*MyStruct. Unless you need to express that certain indices in the slice are nil, then this is just wasteful and []MyStruct is better in almost all circumstances.</description>
    </item>
    <item>
      <title>Kubernetes&#39; dirty endpoint secret and Ingress</title>
      <link>https://philpearl.github.io/post/k8s_ingress/</link>
      <pubDate>Fri, 26 Jul 2019 18:07:00 +0000</pubDate>
      <guid>https://philpearl.github.io/post/k8s_ingress/</guid>
      <description>At Ravelin we&amp;rsquo;ve migrated to Kubernetes (on GKE). This has been very successful. We&amp;rsquo;ve got pod disruption budgets coming out of our ears, our statefulsets are very stately, and rolling node replacements run without a hitch.&#xA;The last piece of the puzzle is to move our API layer from the old VMs into our kubernetes cluster. For this we need to set up an Ingress so the API can be accessed from the outside world.</description>
    </item>
    <item>
      <title>Go interfaces, but at what cost?</title>
      <link>https://philpearl.github.io/post/interface_at_what_cost/</link>
      <pubDate>Sat, 06 Jul 2019 15:31:00 +0000</pubDate>
      <guid>https://philpearl.github.io/post/interface_at_what_cost/</guid>
      <description>There&amp;rsquo;s a cost associated with using interfaces. What is that cost? Let&amp;rsquo;s try and work out some of it.&#xA;Let&amp;rsquo;s start with the basic overhead of calling a method via an interface. We&amp;rsquo;ll define a very simple interface with a single method and a very simple implementation. We&amp;rsquo;ll also mark the method so it isn&amp;rsquo;t inlined by the compiler. We do this so that the call to get isn&amp;rsquo;t completely removed in the direct case.</description>
    </item>
    <item>
      <title>JSON and embedding</title>
      <link>https://philpearl.github.io/post/json_embed/</link>
      <pubDate>Sun, 10 Mar 2019 20:49:37 +0000</pubDate>
      <guid>https://philpearl.github.io/post/json_embed/</guid>
      <description>Did everyone else already know this? Why didn&amp;rsquo;t you tell me? I got very confused the other day with some apparently simple JSON encoding. Here&amp;rsquo;s a simplified version, showing marshalling a struct with an embedded struct inside it.&#xA;package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; ) type Inner struct { InnerField string `json:&amp;#34;inner_field&amp;#34;` } type Outer struct { Inner OuterField string `json:&amp;#34;outer_field&amp;#34;` } func main() { val := Outer{ Inner: Inner { InnerField: &amp;#34;inner&amp;#34;, }, OuterField: &amp;#34;outer&amp;#34;, } data, err := json.</description>
    </item>
    <item>
      <title>The why of Go strings</title>
      <link>https://philpearl.github.io/post/why_of_go_strings/</link>
      <pubDate>Sun, 10 Mar 2019 15:10:27 +0000</pubDate>
      <guid>https://philpearl.github.io/post/why_of_go_strings/</guid>
      <description>Regular readers of my blog will all be aware that in Go a string is in fact a struct with a pointer to an area of memory containing the byte content of the string and an integer Len that tells you how many bytes make up the string.&#xA;Ever wondered why? Probably not, as it seems “obvious” that you need both the length of the string and the bytes of the string to make a string.</description>
    </item>
    <item>
      <title>Further Dangers of Large Heaps in Go</title>
      <link>https://philpearl.github.io/post/danger_large_heap/</link>
      <pubDate>Thu, 15 Nov 2018 19:57:02 +0000</pubDate>
      <guid>https://philpearl.github.io/post/danger_large_heap/</guid>
      <description>The latest issue is a problem with the bulk feature extraction process we use at Ravelin (yes, we’re hiring! So if you like Go and you’re anywhere near London drop us a line). For our larger clients we’ve found this process just uses more and more memory, so we keep having to run it on more and more expensive boxes. I presumed it was a memory leak of some kind, so I decided to investigate.</description>
    </item>
    <item>
      <title>bytes.Buffer revisited</title>
      <link>https://philpearl.github.io/post/bytes_buffer_revisted/</link>
      <pubDate>Sun, 02 Sep 2018 20:15:18 +0000</pubDate>
      <guid>https://philpearl.github.io/post/bytes_buffer_revisted/</guid>
      <description>Two years ago I wrote a post about building up strings with bytes.Buffer. I wondered what’s changed over the past two years?&#xA;Here are the benchmarks taken from the original post.&#xA;BenchmarkCopyKey-8 114 ns/op 31 B/op 1 allocs/op BenchmarkSimpleKey-8 141 ns/op 31 B/op 1 allocs/op BenchmarkSimpleMultilineKey-8 256 ns/op 63 B/op 4 allocs/op BenchmarkSprintfKey-8 392 ns/op 79 B/op 4 allocs/op BenchmarkJoinKey-8 156 ns/op 63 B/op 2 allocs/op BenchmarkBufferKey-8 268 ns/op 175 B/op 3 allocs/op BenchmarkSimpleBufferKey-8 265 ns/op 143 B/op 2 allocs/op If we run the same benchmarks with the latest version of Go — 1.</description>
    </item>
    <item>
      <title>Go in a scratch VM</title>
      <link>https://philpearl.github.io/post/go_scratch_vm/</link>
      <pubDate>Mon, 04 Jun 2018 20:19:41 +0000</pubDate>
      <guid>https://philpearl.github.io/post/go_scratch_vm/</guid>
      <description>Many of us know that you can run Go binaries in “scratch” containers. Your container doesn’t need to be based on Alpine or Ubuntu. It can be based on nothing and contain just the binary you built from Go source. This is largely because Go code can be statically linked, and so requires no installed libraries.&#xA;But what about VMs? Normally you start from Ubuntu, or Alpine or whatever and then you install your stuff on top.</description>
    </item>
    <item>
      <title>A container image in 60* lines of Go</title>
      <link>https://philpearl.github.io/post/container_60/</link>
      <pubDate>Sun, 29 Apr 2018 22:05:50 +0000</pubDate>
      <guid>https://philpearl.github.io/post/container_60/</guid>
      <description>At Ravelin we build Go binaries, package them into scratch Docker containers and upload them to Google Cloud Registry so we can use them in a GKE cluster. We develop on Mac laptops, so we use Docker for Mac for this. But building and pushing the container images is very slow, particularly if we want to build 44 at once. Given we just want to package up single binaries the process seemed a bit overblown and complicated.</description>
    </item>
    <item>
      <title>What’s all that memory for?</title>
      <link>https://philpearl.github.io/post/memory_for/</link>
      <pubDate>Tue, 17 Apr 2018 22:27:40 +0000</pubDate>
      <guid>https://philpearl.github.io/post/memory_for/</guid>
      <description>If you actually want to use the memory on your computer with Go — really use it, with gigabytes of it allocated — then you may pay a big penalty for the Go garbage collector (GC). But there are things you can do about it.&#xA;The Go GC checks what parts of the memory you have allocated are still in use. It does this by looking at all the memory for references to other pieces of memory.</description>
    </item>
    <item>
      <title>GC is bad and you should feel bad</title>
      <link>https://philpearl.github.io/post/gc_bad/</link>
      <pubDate>Wed, 24 Jan 2018 22:35:54 +0000</pubDate>
      <guid>https://philpearl.github.io/post/gc_bad/</guid>
      <description>Some time ago I wrote about how I went to great lengths moving allocations off the Go heap into memory allocated directly from the OS in order to reduce the overhead of GC. This was in a new Graph Database I was developing at Ravelin to catch bad people more efficiently. At the time I wasn’t entirely certain that the GC CPU overhead was a terrible thing, but it was untidy and I didn’t want to risk putting the new code into production without getting rid of it.</description>
    </item>
  </channel>
</rss>
