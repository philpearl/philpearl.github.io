<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>performance on Phil Pearl&#39;s Blog</title>
    <link>https://philpearl.github.io/categories/performance/</link>
    <description>Recent content in performance on Phil Pearl&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sat, 05 Oct 2019 09:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://philpearl.github.io/categories/performance/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bad Go: Adventures with JSON marshaling</title>
      <link>https://philpearl.github.io/post/badgo_json/</link>
      <pubDate>Sat, 05 Oct 2019 09:00:00 +0000</pubDate>
      
      <guid>https://philpearl.github.io/post/badgo_json/</guid>
      <description>This is a story about encoding/json in the Go standard library. I&amp;rsquo;m not going to say this is bad Go. That would be heresy. But there is an aspect of marshaling that could be improved. Because it is in the standard library it isn&amp;rsquo;t bad Go, but if you followed the pattern in your own code then that would be a mistake. Outside of the standard library it would lose its magical aura, and it would be bad Go.</description>
    </item>
    
    <item>
      <title>Bad Go: guessing</title>
      <link>https://philpearl.github.io/post/bad_go_guessing/</link>
      <pubDate>Fri, 20 Sep 2019 09:25:00 +0000</pubDate>
      
      <guid>https://philpearl.github.io/post/bad_go_guessing/</guid>
      <description>This is the 5th in a series of posts about Bad Go - a clickbaity title for posts about Go code that I&amp;rsquo;ve found frustrating because it could just be that little bit better. Better in my mind means more performant with less impact on GC, without being more complex or harder to read.
In this post I&amp;rsquo;ll rant about a problem I&amp;rsquo;ve seen in a number of blog posts.</description>
    </item>
    
    <item>
      <title>Bad Go: not sizing slices</title>
      <link>https://philpearl.github.io/post/bad_go_not_sizing_arrays/</link>
      <pubDate>Thu, 05 Sep 2019 09:25:00 +0000</pubDate>
      
      <guid>https://philpearl.github.io/post/bad_go_not_sizing_arrays/</guid>
      <description>This is the 4th in a series of posts about Bad Go - a clickbaity title for posts about Go code that I&amp;rsquo;ve found frustrating because it could just be that little bit better. Better in my mind means more performant with less impact on GC, without being more complex or harder to read.
In this post we&amp;rsquo;ll look at a very common issue - not setting the size of a slice when you know how big it needs to be.</description>
    </item>
    
    <item>
      <title>Bad Go: frivolous Sprintf</title>
      <link>https://philpearl.github.io/post/bad_go_sprintf/</link>
      <pubDate>Sun, 01 Sep 2019 09:25:00 +0000</pubDate>
      
      <guid>https://philpearl.github.io/post/bad_go_sprintf/</guid>
      <description>This is the 3rd in a series of posts about Bad Go - a clickbaity title for posts about Go that I&amp;rsquo;ve found frustrating because it could just be that little bit better. Better in my mind is often more performant with less impact on GC without being more complex or harder to read.
The first two posts are about slices of pointers and pointer returns from functions
This one is about reaching for fmt.</description>
    </item>
    
    <item>
      <title>Bad Go: pointer returns</title>
      <link>https://philpearl.github.io/post/bad_go_pointer_returns/</link>
      <pubDate>Fri, 30 Aug 2019 15:30:00 +0000</pubDate>
      
      <guid>https://philpearl.github.io/post/bad_go_pointer_returns/</guid>
      <description>As an old C programmer I struggle with this one: it feels completely normal for functions to return pointers to structs. But I&amp;rsquo;ve a feeling this is bad Go, and that we&amp;rsquo;re normally better off returning struct values. I&amp;rsquo;m going to see if I can prove that returning struct values is just plain better, and that returning pointers is bad Go.
I&amp;rsquo;m going to define a struct that I can vary in size easily.</description>
    </item>
    
    <item>
      <title>Bad Go: slices of pointers</title>
      <link>https://philpearl.github.io/post/bad_go_slice_of_pointers/</link>
      <pubDate>Fri, 30 Aug 2019 09:25:00 +0000</pubDate>
      
      <guid>https://philpearl.github.io/post/bad_go_slice_of_pointers/</guid>
      <description>This is the first of what may be a series of blog posts on uses of Go that I&amp;rsquo;ve found frustrating. They&amp;rsquo;re mostly minor things that could just be better without being more complicated. I&amp;rsquo;m going to try to not only explain why they are bad but also demonstrate it.
First up is slices of pointers. Things like []*MyStruct. Unless you need to express that certain indices in the slice are nil, then this is just wasteful and []MyStruct is better in almost all circumstances.</description>
    </item>
    
    <item>
      <title>Further Dangers of Large Heaps in Go</title>
      <link>https://philpearl.github.io/post/danger_large_heap/</link>
      <pubDate>Thu, 15 Nov 2018 19:57:02 +0000</pubDate>
      
      <guid>https://philpearl.github.io/post/danger_large_heap/</guid>
      <description>The latest issue is a problem with the bulk feature extraction process we use at Ravelin (yes, we’re hiring! So if you like Go and you’re anywhere near London drop us a line). For our larger clients we’ve found this process just uses more and more memory, so we keep having to run it on more and more expensive boxes. I presumed it was a memory leak of some kind, so I decided to investigate.</description>
    </item>
    
    <item>
      <title>bytes.Buffer revisited</title>
      <link>https://philpearl.github.io/post/bytes_buffer_revisted/</link>
      <pubDate>Sun, 02 Sep 2018 20:15:18 +0000</pubDate>
      
      <guid>https://philpearl.github.io/post/bytes_buffer_revisted/</guid>
      <description>Two years ago I wrote a post about building up strings with bytes.Buffer. I wondered what’s changed over the past two years?
Here are the benchmarks taken from the original post.
BenchmarkCopyKey-8 114 ns/op 31 B/op 1 allocs/op BenchmarkSimpleKey-8 141 ns/op 31 B/op 1 allocs/op BenchmarkSimpleMultilineKey-8 256 ns/op 63 B/op 4 allocs/op BenchmarkSprintfKey-8 392 ns/op 79 B/op 4 allocs/op BenchmarkJoinKey-8 156 ns/op 63 B/op 2 allocs/op BenchmarkBufferKey-8 268 ns/op 175 B/op 3 allocs/op BenchmarkSimpleBufferKey-8 265 ns/op 143 B/op 2 allocs/op  If we run the same benchmarks with the latest version of Go — 1.</description>
    </item>
    
  </channel>
</rss>