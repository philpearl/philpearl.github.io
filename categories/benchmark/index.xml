<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Benchmark on EnTitled</title>
    <link>https://philpearl.github.io/categories/benchmark/</link>
    <description>Recent content in Benchmark on EnTitled</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 02 Sep 2018 20:15:18 +0000</lastBuildDate>
    
	<atom:link href="https://philpearl.github.io/categories/benchmark/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>bytes.Buffer revisited</title>
      <link>https://philpearl.github.io/post/bytes_buffer_revisted/</link>
      <pubDate>Sun, 02 Sep 2018 20:15:18 +0000</pubDate>
      
      <guid>https://philpearl.github.io/post/bytes_buffer_revisted/</guid>
      <description>Two years ago I wrote a post about building up strings with bytes.Buffer. I wondered what’s changed over the past two years?
Here are the benchmarks taken from the original post.
BenchmarkCopyKey-8 114 ns/op 31 B/op 1 allocs/op BenchmarkSimpleKey-8 141 ns/op 31 B/op 1 allocs/op BenchmarkSimpleMultilineKey-8 256 ns/op 63 B/op 4 allocs/op BenchmarkSprintfKey-8 392 ns/op 79 B/op 4 allocs/op BenchmarkJoinKey-8 156 ns/op 63 B/op 2 allocs/op BenchmarkBufferKey-8 268 ns/op 175 B/op 3 allocs/op BenchmarkSimpleBufferKey-8 265 ns/op 143 B/op 2 allocs/op  If we run the same benchmarks with the latest version of Go — 1.</description>
    </item>
    
  </channel>
</rss>