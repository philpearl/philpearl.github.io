<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Json on EnTitled</title>
    <link>https://philpearl.github.io/categories/json/</link>
    <description>Recent content in Json on EnTitled</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sat, 13 Jul 2019 20:49:37 +0000</lastBuildDate>
    
	<atom:link href="https://philpearl.github.io/categories/json/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Why is JSON slow</title>
      <link>https://philpearl.github.io/post/json_why_slow/</link>
      <pubDate>Sat, 13 Jul 2019 20:49:37 +0000</pubDate>
      
      <guid>https://philpearl.github.io/post/json_why_slow/</guid>
      <description>Why is the Go standard package JSON slow? Is it slow? What does it mean to be slow?
One definition of slow is whether it is slower than the alternatives for JSON encoding. I&amp;rsquo;ll pick easyjson as that&amp;rsquo;s something I&amp;rsquo;ve been using at work. We&amp;rsquo;ll build a little JSON, then write some benchmarks to compare unmarshalling it between standard encoding/json and easyjson.
First benchmark. encoding/json takes more than twice as long as easyjson and requires more allocations.</description>
    </item>
    
    <item>
      <title>JSON and embedding</title>
      <link>https://philpearl.github.io/post/json_embed/</link>
      <pubDate>Sun, 10 Mar 2019 20:49:37 +0000</pubDate>
      
      <guid>https://philpearl.github.io/post/json_embed/</guid>
      <description>Did everyone else already know this? Why didn&amp;rsquo;t you tell me? I got very confused the other day with some apparently simple JSON encoding. Here&amp;rsquo;s a simplified version, showing marshalling a struct with an embedded struct inside it.
package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; ) type Inner struct { InnerField string `json:&amp;#34;inner_field&amp;#34;` } type Outer struct { Inner OuterField string `json:&amp;#34;outer_field&amp;#34;` } func main() { val := Outer{ Inner: Inner { InnerField: &amp;#34;inner&amp;#34;, }, OuterField: &amp;#34;outer&amp;#34;, } data, err := json.</description>
    </item>
    
  </channel>
</rss>